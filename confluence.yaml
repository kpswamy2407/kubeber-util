---
# Source: confluence-server/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: confluence-server-db
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.1.4
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql-password: "WldPaVpEa1RnOA=="
---
# Source: confluence-server/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: confluence-confluence-server
  labels:
    helm.sh/chart: confluence-server-2.0.4
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/version: "7.9.3"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  ATL_JDBC_PASSWORD: "Q0hBTkdFTUU="
---
# Source: confluence-server/templates/configmap-db-helper.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name:  confluence-db-helper-cm
  labels:
    helm.sh/chart: confluence-server-2.0.4
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/version: "7.9.3"
    app.kubernetes.io/managed-by: Helm
data:
  setup.sql: |
    CREATE USER confluenceuser WITH ENCRYPTED PASSWORD 'CHANGEME';
    CREATE DATABASE confluencedb WITH OWNER confluenceuser
      ENCODING 'UTF8' LC_COLLATE='C' LC_CTYPE='C' TEMPLATE template0;
---
# Source: confluence-server/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: confluence-confluence-server-cm
  labels:
    helm.sh/chart: confluence-server-2.0.4
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/version: "7.9.3"
    app.kubernetes.io/managed-by: Helm
data:
  ATL_JDBC_URL: "jdbc:postgresql://confluence-server-db:5432/confluencedb"
  ATL_JDBC_USER: "confluenceuser"
  ATL_DB_TYPE: "postgresql"
---
# Source: confluence-server/templates/pvc-home.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: confluence-confluence-server-home
  labels:
    helm.sh/chart: confluence-server-2.0.4
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/version: "7.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: confluence-server/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluence-server-db-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.1.4
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: confluence
---
# Source: confluence-server/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluence-server-db
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.1.4
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: confluence
    role: master
---
# Source: confluence-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluence-confluence-server
  labels:
    helm.sh/chart: confluence-server-2.0.4
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/version: "7.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8090
    protocol: TCP
  selector:
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: confluence
---
# Source: confluence-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: confluence-confluence-server
  labels:
    helm.sh/chart: confluence-server-2.0.4
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/version: "7.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: confluence-server
      app.kubernetes.io/instance: confluence
  template:
    metadata:
      labels:
        app.kubernetes.io/name: confluence-server
        app.kubernetes.io/instance: confluence
    spec:
      initContainers:
        - name: init-postgres
          image: "postgres:9.6.11-alpine"
          imagePullPolicy: IfNotPresent
          command: [
            "sh",
            "-c",
            "until pg_isready -h confluence-server-db -p 5432 ; do echo waiting for confluence-server-db; sleep 5; done;"]
      serviceAccountName: default
      securityContext:
        fsGroup: 2002
      containers:
        - name: confluence-server
          image: "atlassian/confluence-server:7.9.3"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: confluence-confluence-server-cm
          env:
            - name: ATL_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: confluence-confluence-server
                  key: ATL_JDBC_PASSWORD
            - name: JVM_SUPPORT_RECOMMENDED_ARGS
              value: "\
                "
          ports:
            - name: http
              containerPort: 8090
              protocol: TCP
            - name: synchrony
              containerPort: 8091
              protocol: TCP
          volumeMounts:
            - mountPath: /var/atlassian/application-data/confluence
              name: confluence-confluence-server-home
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
      volumes:
        - name: confluence-confluence-server-home
          persistentVolumeClaim:
            claimName: confluence-confluence-server-home
---
# Source: confluence-server/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: confluence-server-db
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.1.4
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  serviceName: confluence-server-db-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: confluence
      role: master
  template:
    metadata:
      name: confluence-server-db
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-9.1.4
        app.kubernetes.io/instance: confluence
        app.kubernetes.io/managed-by: Helm
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: confluence-server-db
          image: docker.io/bitnami/postgresql:10
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: confluence-server-db
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: custom-init-scripts
          configMap:
            name: confluence-db-helper-cm
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"

